// ----------------------------------------------------------------------------------------------
// Copyright (c) Mårten Rånge.
// ----------------------------------------------------------------------------------------------
// This source code is subject to terms and conditions of the Microsoft Public License. A 
// copy of the license can be found in the License.html file at the root of this distribution. 
// If you cannot locate the  Microsoft Public License, please send an email to 
// dlr@microsoft.com. By using this source code in any fashion, you are agreeing to be bound 
//  by the terms of the Microsoft Public License.
// ----------------------------------------------------------------------------------------------
// You must not remove this notice, or any other, from this software.
// ----------------------------------------------------------------------------------------------
<#@ template debug="false" hostspecific="false" language="C#"  #>
<#@ output extension=".cs"                                     #>
<#@ assembly name="System.Core"                                #>
<#@ import namespace="System"                                  #>
<#@ import namespace="System.Globalization"                    #>
<#@ import namespace="System.Linq"                             #>
using Presentation.Library.Utility;
using System;
using System.Collections.ObjectModel;
using System.Diagnostics;
using System.Runtime.Serialization;
using System.Windows;
using System.Windows.Media;

// ReSharper disable ConditionIsAlwaysTrueOrFalse
// ReSharper disable HeuristicUnreachableCode
// ReSharper disable MemberCanBePrivate.Global
// ReSharper disable RedundantAssignment
// ReSharper disable RedundantCast
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart

<#
   var model = new ModelClassDefinition []
      {
// ----------------------------------------------------------------------------
// MODEL DEFINITION BEGIN:
// ----------------------------------------------------------------------------
new ModelClassDefinition   
   {
      Name = "Theme",
      Properties = new ModelPropertyDefinition []
         {
            P  ("Size"     , "Dimension"        , defaultValue:"new Size (1280, 1024)" ),
         },
   },
new ModelClassDefinition   
   {
      Name = "Presentation",
      Properties = new ModelPropertyDefinition []
         {
            P  ("string"         , "Name"                   , defaultValue:@"""[Untitled]"""    ),
            P  ("DateTime"       , "Created"                                                    ),
            P  ("bool"           , "IsShowingNotes"         , flags:PropertyFlags.IsUntracked   ),
            P  ("Theme"          , "CurrentTheme"                                               ),
            P  ("Slide"          , "CurrentSlide"                                               ),
            C  ("Slide"          , "Slides"                                                     ),  
         },
   },
new ModelClassDefinition   
   {
      Name = "BaseElement",
      IsBase = true,
      Properties = new ModelPropertyDefinition []
         {
            P  ("int"         , "ZIndex"                                ),
            P  ("int"         , "OpacityPercent", defaultValue:"100"    ),
            P  ("double"      , "Angle"                                 ),
            P  ("double"      , "Left"                                  ),
            P  ("double"      , "Top"                                   ),
            P  ("double"      , "Width"         , defaultValue:"100.0"  ),
            P  ("double"      , "Height"        , defaultValue:"100.0"  ),
         },
   },
new ModelClassDefinition   
   {
      Name = "TextElement",
      Base = "BaseElement",
      Properties = new ModelPropertyDefinition []
         {
            P  ("Color"       , "BackgroundColor"  , defaultValue:"Colors.Transparent"    ),
            P  ("Color"       , "ForegroundColor"  , defaultValue:"Colors.White"          ),
            P  ("string"      , "FontName"         , defaultValue:@"""Verdana"""          ),
            P  ("double"      , "FontSize"         , defaultValue:"24.0"                  ),
            P  ("string"      , "Text"             , defaultValue:@"""Write some text"""  ),
         },
   },
new ModelClassDefinition   
   {
      Name = "PictureElement",
      Base = "BaseElement",
      Properties = new ModelPropertyDefinition []
         {
            P  ("string"      , "PictureSource"   ),
         },
   },
new ModelClassDefinition   
   {
      Name = "ShapeElement",
      Base = "BaseElement",
      Properties = new ModelPropertyDefinition []
         {
            P  ("Color"       , "BackgroundColor"  , defaultValue:"Colors.Transparent"    ),
            P  ("Color"       , "ForegroundColor"  , defaultValue:"Colors.White"          ),
            P  ("string"      , "Path"                                                    ),
         },
   },
new ModelClassDefinition   
   {
      Name = "MovieElement",
      Base = "BaseElement",
      Properties = new ModelPropertyDefinition []
         {
            P  ("string"      , "MovieSource"   ),
         },
   },
new ModelClassDefinition   
   {
      Name = "Slide",
      Properties = new ModelPropertyDefinition []
         {
             P  ("DateTime"      , "Created"                ),
             P  ("string"        , "Note"                   ),
             C  ("BaseElement"   , "Elements"               ),
         },
   },
// ----------------------------------------------------------------------------
// MODEL DEFINITION END:
// ----------------------------------------------------------------------------

      };

   var modelEntitiesOfBase = model.ToLookup (k => k.Base);
#>

namespace Presentation.Library.Model
{
   // -------------------------------------------------------------------------

   // *************************************************************************
   // MODEL CLASSES
   // *************************************************************************
<#
   // FOREACH: Generates a ModelEntity foreach entity in model
   foreach (var modelEntity in model)
   {
      var modelEntityType           = modelEntity.Name;
      var modelEntityBaseType       = modelEntity.Base ?? "BaseModelEntity";
      var modelEntityIsBase         = modelEntity.IsBase;
      var modelEntityClassDecorator = modelEntityIsBase ? "abstract" : "sealed"  ;
      var modelEntityGenericType    = modelEntity.GenericType;
      var modelFullEntityType       = 
         modelEntityGenericType != null 
            ?  modelEntityType + "<" + modelEntityGenericType + ">"
            :  modelEntityType;
      var modelEntityGenericRestric = 
         modelEntityGenericType != null 
            ?  "where " + modelEntityGenericType + " : class"
            :  "";

#>

   // -------------------------------------------------------------------------
   public <#=modelEntityClassDecorator#> partial class <#=modelFullEntityType#>
      :  <#=modelEntityBaseType#>
      <#=modelEntityGenericRestric#>
   {
      #region Dependency Properties for <#=modelEntityType#>
<#
      // FOREACH: Generates a Dependency property foreach property in model
      foreach (var modelProperty in modelEntity.Properties)
      {
         var modelPropertyName         = modelProperty.Name                         ;
         var modelPropertyDepName      = modelProperty.Name + "Property"            ;
         var modelPropertyType         = modelProperty.Type                         ;
         var modelPropertyDefault      = modelProperty.DefaultValue                 ;
         var modelPropertyUntracked    = modelProperty.IsUntracked                  ;
         var onChangeName              = "OnChange_"        + modelPropertyName     ;
         var onCollectionChangeName    = "OnCollectionChange_" + modelPropertyName  ;
         var modelPropertyIsCollection = modelProperty.IsCollection                 ;

#>
      public static readonly DependencyProperty <#=modelPropertyDepName#> = 
         DependencyProperty.Register (
               "<#=modelPropertyName#>"
            ,  typeof (<#=modelPropertyType#>)
            ,  typeof (<#=modelFullEntityType#>)            
            ,  new PropertyMetadata (
                  <#=modelPropertyDefault#>
               ,  <#=onChangeName#>
               )
            );

      static void <#=onChangeName#> (DependencyObject d, DependencyPropertyChangedEventArgs e)
      {
#if DEBUG
         Debug.WriteLine ("ModelProperty.Change : Prop:<#=modelPropertyName#>, Old:{0}, New:{1}, Instance:{2}({3})", e.OldValue, e.NewValue, d.SafeGetHashCode (), d.SafeGetTypeName ());
#endif
         var dobj = (<#=modelFullEntityType#>)d;
         if (dobj != null)
         {
            var mc = dobj.ModelContext;
            if (mc != null)
            {
               var oldValue = (<#=modelPropertyType#>)e.OldValue;
               var newValue = (<#=modelPropertyType#>)e.NewValue;

<#
         if (modelPropertyIsCollection && !modelPropertyUntracked)
         {
#>
               if (oldValue != null)
               {
                  oldValue.CollectionChanged -= dobj.OnCollectionChanged;
               }

               if (newValue != null)
               {
                  newValue.CollectionChanged += dobj.OnCollectionChanged;
               }
<#
         }
#>

               if (mc.ChangeNotificationActivated)
               {
                  var handled = false;
                  dobj.<#=onChangeName#> (oldValue, newValue, ref handled);
               }

<#
         if (!modelPropertyUntracked)
         {
#>
               if (mc.IsChangeTracking)
               {
                  mc.AppendSetPropertyAction (
                     d,
                     e
                     );
               }
<#
         }
#>
            }
         }
      }
<#
      }
#>
      #endregion

      // ----------------------------------------------------------------------

      // ----------------------------------------------------------------------
      <#=modelEntityIsBase ? "protected" : "public"#> <#=modelEntityType#> (ModelContext modelContext)
         :  base (modelContext)
      {
         OnCreate_<#=modelEntityType#> ();
      }
      // ----------------------------------------------------------------------

      // ----------------------------------------------------------------------
      partial void OnCreate_<#=modelEntityType#> ();
      // ----------------------------------------------------------------------

      // ----------------------------------------------------------------------
      public override void Update<TParent> (TParent parent)
      {
         var handled = false;
<#
      // FOREACH: Generates a change notification foreach property
      foreach (var modelProperty in modelEntity.Properties)
      {
         var modelPropertyName         = modelProperty.Name                         ;
         var onChangeName              = "OnChange_"        + modelPropertyName     ;
#>
         <#=onChangeName#> (<#=modelPropertyName#>, <#=modelPropertyName#>, ref handled);
         handled = false;
<#
      }
#>

<#
      // FOREACH: Notifies all sub instances
      foreach (var modelProperty in modelEntity.Properties)
      {
         var modelPropertyName         = modelProperty.Name                         ;
#>
         Update (this, <#=modelPropertyName#>);
<#
      }
#>
      }
      // ----------------------------------------------------------------------

<#
      // FOREACH: Generates a property foreach property in model
      foreach (var modelProperty in modelEntity.Properties)
      {
         var modelPropertyName      = modelProperty.Name                      ;
         var modelPropertyDepName   = modelProperty.Name + "Property"         ;
         var modelPropertyType      = modelProperty.Type                      ;
         var onChangeName           = "OnChange_"        + modelPropertyName  ;
#>

      // ----------------------------------------------------------------------
      public <#=modelPropertyType#> <#=modelPropertyName#>
      {
         get
         {
            return (<#=modelPropertyType#>) GetValue (<#=modelPropertyDepName#>);
         }
         set
         {
            var currentValue = <#=modelPropertyName#>;

            if (currentValue != value)
            {
               SetValue (<#=modelPropertyDepName#>, value);
            }
         }
      }
      // ----------------------------------------------------------------------
      partial void <#=onChangeName#> (<#=modelPropertyType#> oldValue, <#=modelPropertyType#> newValue, ref bool handled);
      // ----------------------------------------------------------------------
<#
      }
#>
   }
<#
   }
#>
   // -------------------------------------------------------------------------

   // *************************************************************************
   // MODEL COPIER
   // *************************************************************************

   // -------------------------------------------------------------------------
   public static partial class ModelCopier
   {
      // ----------------------------------------------------------------------
<#
   // FOREACH: Generates an CopyMethod foreach entity in model
   foreach (var modelEntity in model)
   {
      var modelEntityType           = modelEntity.Name;
      var modelEntityBaseType       = modelEntity.Base ?? "BaseModelEntity";
      var modelEntityIsBase         = modelEntity.IsBase;
      var modelEntityGenericType    = modelEntity.GenericType;
      var modelFullEntityType       = 
         modelEntityGenericType != null 
            ?  modelEntity.Name + "<" + modelEntityGenericType + ">"
            :  modelEntity.Name;
      var modelCopyImplName         = 
         modelEntityGenericType != null 
            ?  "CopyImpl<" + modelEntityGenericType + ">"
            :  "CopyImpl";
      var modelEntityGenericRestric = 
         modelEntityGenericType != null 
            ?  "where " + modelEntityGenericType + " : class"
            :  "";
#>

      // ----------------------------------------------------------------------
      static void <#=modelCopyImplName#> (
            ModelContext modelContext
         ,  <#=modelFullEntityType#> fromValue
         ,  <#=modelFullEntityType#> toValue
         )
         <#=modelEntityGenericRestric#>
      {
         CopyImpl (
               modelContext
            ,  (<#=modelEntityBaseType#>)fromValue
            ,  (<#=modelEntityBaseType#>)toValue
            );

<#
      // FOREACH: Copy property foreach property in model
      foreach (var modelProperty in modelEntity.Properties)
      {
         var modelPropertyName      = modelProperty.Name                      ;
         var modelPropertyType      = modelProperty.Type                      ;
         var modelPropertyDefault   = modelProperty.DefaultValue              ;
#>
         {        
            <#=modelPropertyType#> value;
            Copy (modelContext, fromValue.<#=modelPropertyName#>, out value);
            toValue.<#=modelPropertyName#> = value;
         }
<#
      }
#>
      }
      // ----------------------------------------------------------------------
      public static void Copy (
            ModelContext modelContext
         ,  ObservableCollection<<#=modelFullEntityType#>> fromValue
         ,  out ObservableCollection<<#=modelFullEntityType#>> toValue
         )
      {
         if (fromValue != null)
         {
            toValue = new ObservableCollection<<#=modelFullEntityType#>> ();

            foreach (var item in fromValue)
            {
               <#=modelFullEntityType#> value;
               Copy (modelContext, item, out value);
               toValue.Add (value);
            }
         }
         else
         {
            toValue = null;
         }
      }
<#
      // IF: modelEntityIsBase
      if (modelEntityIsBase)
      {
         var subTypes = modelEntitiesOfBase[modelEntityType];
#>
      // ----------------------------------------------------------------------
      public static void Copy (
            ModelContext modelContext
         ,  <#=modelFullEntityType#> fromValue
         ,  out <#=modelFullEntityType#> toValue
         )
      {
         toValue = null;
<#
         foreach (var subType in subTypes)
         {
#>
         if (fromValue is <#=subType.Name#>)
         {
            <#=subType.Name#> value;
            Copy (
                  modelContext
               ,  (<#=subType.Name#>)fromValue
               ,  out value
               );
            toValue = value;
         }
<#
         }
#>
      }
<#
      }
      else
      {
#>
      // ----------------------------------------------------------------------
      public static void Copy (
            ModelContext modelContext
         ,  <#=modelFullEntityType#> fromValue
         ,  out <#=modelFullEntityType#> toValue
         )
      {
         toValue = new <#=modelFullEntityType#> (modelContext);
         CopyImpl (modelContext, fromValue, toValue);
      }
<#
      }
#>
      // ----------------------------------------------------------------------
<#
   }
#>
   }
   // -------------------------------------------------------------------------

   // *************************************************************************
   // SERIALIZABLE MODEL 
   // *************************************************************************

   // -------------------------------------------------------------------------
   namespace Serializable
   {
      // ----------------------------------------------------------------------

      // ----------------------------------------------------------------------
      public static class Support
      {
         public static Type[] KnownTypes
         {
            get
            {
               return new Type[]
                  {
<#
   // FOREACH: Generates a serializable entity foreach entity in model
   foreach (var modelEntity in model)
   {
      var modelEntityType           = modelEntity.Name;
      var modelEntityGenericType    = modelEntity.GenericType;
      var modelFullEntityType       = 
         modelEntityGenericType != null 
            ?  modelEntity.Name + "<" + modelEntityGenericType + ">"
            :  modelEntity.Name;
#>
                     typeof (<#=modelFullEntityType#>),
<#
   }
#>
                  };
            }
         }
      }
      // ----------------------------------------------------------------------

      // ----------------------------------------------------------------------
<#
   // FOREACH: Generates a serializable entity foreach entity in model
   foreach (var modelEntity in model)
   {
      var modelEntityType           = modelEntity.Name;
      var modelEntityBaseType       = modelEntity.Base ?? "object";
      var modelEntityIsBase         = modelEntity.IsBase;
      var modelEntityGenericType    = modelEntity.GenericType;
      var modelFullEntityType       = 
         modelEntityGenericType != null 
            ?  modelEntity.Name + "<" + modelEntityGenericType + ">"
            :  modelEntity.Name;
      var modelEntityGenericRestric = 
         modelEntityGenericType != null 
            ?  "where " + modelEntityGenericType + " : class"
            :  "";
#>

      // ----------------------------------------------------------------------
      [DataContract]
      public class <#=modelFullEntityType#>
         : <#=modelEntityBaseType#>
      {
<#
      // FOREACH: Copy property foreach property in model
      foreach (var modelProperty in modelEntity.Properties)
      {
         var modelPropertyName            = modelProperty.Name          ;
         var modelPropertyType            = modelProperty.Type          ;
         var modelPropertyIsCollection    = modelProperty.IsCollection  ;
         var modelPropertyItemType        = modelProperty.ItemType      ;
         if (modelPropertyIsCollection)
         {
#>
         [DataMember]
         public <#=modelPropertyItemType#>[] <#=modelPropertyName#> {get; set;}
<#
         }
         else
         {
#>
         [DataMember]
         public <#=modelPropertyType#> <#=modelPropertyName#> {get; set;}
<#
         }
      }
#>
      }
<#
   }
#>
   }
   // -------------------------------------------------------------------------

   // -------------------------------------------------------------------------
}

<#+

   static CultureInfo Culture
   {
      get 
      {
         return CultureInfo.InvariantCulture;
      }
   }

   static bool IsOn<T> (T value, T test)
      where T : IConvertible
   {
      var v = value.ToInt32 (Culture);
      var t = test.ToInt32 (Culture);

      return (v & t) == t;
   }

   static ModelPropertyDefinition P (string type, string name, string defaultValue = null, PropertyFlags flags = 0)
   {
      return new ModelPropertyDefinition
         {
            Type           = type   ,
            Name           = name   ,
            DefaultValue   = defaultValue ?? string.Format ("default ({0})", type),
            Flags          = flags,
         };
   }

   static ModelPropertyDefinition C (string type, string name)
   {
      return new ModelPropertyDefinition
         {
            ItemType       = type                                             ,
            Type           = string.Format ("ObservableCollection<{0}>", type),
            Name           = name                                             ,
            DefaultValue   = "null"                                           ,
            Flags          = PropertyFlags.IsCollection                       ,
         };
   }

   [Flags]
   enum PropertyFlags
   {
      IsUntracked    = 0x0001 ,
      IsCollection   = 0x8000 ,
   }


   class ModelClassDefinition 
   {
      public string                       Name        ;
      public string                       Base        ;
      public bool                         IsBase      ;
      public string                       GenericType ;
      public ModelPropertyDefinition []   Properties  = new ModelPropertyDefinition [0];
   }

   class ModelPropertyDefinition 
   {
      public string                       ItemType       ;
      public string                       Type           ;
      public string                       Name           ;
      public string                       DefaultValue   ;
      public PropertyFlags                Flags          ;

      public bool IsUntracked
      {
         get
         {
            return IsOn (Flags, PropertyFlags.IsUntracked);
         }
      }

      public bool IsCollection
      {
         get
         {
            return IsOn (Flags, PropertyFlags.IsCollection);
         }
      }
   }


#>